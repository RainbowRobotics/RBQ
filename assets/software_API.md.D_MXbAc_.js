import{_ as e,c as o,o as d,ae as a}from"./chunks/framework.DRno8Cka.js";const m=JSON.parse('{"title":"RBQ API Overview","description":"","frontmatter":{"layout":"doc","outline":"deep"},"headers":[],"relativePath":"software/API.md","filePath":"software/API.md","lastUpdated":1750224677000}'),r={name:"software/API.md"};function i(n,t,s,c,l,h){return d(),o("div",null,t[0]||(t[0]=[a('<h1 id="rbq-api-overview" tabindex="-1">RBQ API Overview <a class="header-anchor" href="#rbq-api-overview" aria-label="Permalink to &quot;RBQ API Overview&quot;">​</a></h1><p>The <strong>RBQ API</strong> provides a comprehensive C++ interface for developers to control and interact with the RBQ quadruped robot. It is designed to support both low-level real-time control and high-level behavioral commands in a multi-process environment.</p><h2 id="process-id-motion-ownership" tabindex="-1">Process ID (Motion Ownership) <a class="header-anchor" href="#process-id-motion-ownership" aria-label="Permalink to &quot;Process ID (Motion Ownership)&quot;">​</a></h2><p>When creating an <code>RBQ_API</code> instance, a <strong>process ID</strong> must be provided:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RBQ_API</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Process ID between 20 and 39 for user applications</span></span></code></pre></div><p>This ID ensures safe multi-process control using a <strong>motion ownership mechanism</strong>, where each joint can only be controlled by its owner process.</p><blockquote><p>⚠️ Always call setMotionOwner() before sending joint commands.</p></blockquote><hr><h2 id="api-structure-summary" tabindex="-1">API Structure Summary <a class="header-anchor" href="#api-structure-summary" aria-label="Permalink to &quot;API Structure Summary&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Category</th><th>Component</th><th>Description</th></tr></thead><tbody><tr><td><strong>Control</strong></td><td><code>Joint</code></td><td>Low-level joint control: position, torque, gains (Kp/Kd)</td></tr><tr><td></td><td><code>startMoveJoint()</code> / <code>stopMoveJoint()</code></td><td>Start/stop jog motion per joint</td></tr><tr><td></td><td><code>lockUnlockJoint()</code></td><td>Locks/unlocks joints for manual manipulation</td></tr><tr><td><strong>Sensor</strong></td><td><code>IMU</code></td><td>Access to orientation (quaternion/RPY), gyro, and acceleration</td></tr><tr><td></td><td><code>getBatteryVoltage()</code></td><td>Reads battery voltage (internal only)</td></tr><tr><td><strong>Gamepad</strong></td><td><code>Gamepad</code></td><td>Access Logitech F710 gamepad inputs: jogs, triggers, buttons</td></tr><tr><td><strong>High-level Motion</strong></td><td><code>motionStaticReady()</code> / <code>motionDynamicWalk()</code> etc.</td><td>Predefined robot behaviors</td></tr></tbody></table><hr><h2 id="joint-control-api-rbq-api-joint" tabindex="-1">Joint Control API (<code>RBQ_API::Joint</code>) <a class="header-anchor" href="#joint-control-api-rbq-api-joint" aria-label="Permalink to &quot;Joint Control API (`RBQ_API::Joint`)&quot;">​</a></h2><h3 id="reading-sensor-values" tabindex="-1">Reading Sensor Values <a class="header-anchor" href="#reading-sensor-values" aria-label="Permalink to &quot;Reading Sensor Values&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>getPos()</code></td><td>Read joint position (rad)</td></tr><tr><td><code>getVel()</code></td><td>Read joint velocity (rad/s)</td></tr><tr><td><code>getTorque()</code></td><td>Read joint torque (Nm)</td></tr><tr><td><code>getGainKp()</code> / <code>getGainKd()</code></td><td>Read current Kp/Kd gains</td></tr></tbody></table><h3 id="sending-commands" tabindex="-1">Sending Commands <a class="header-anchor" href="#sending-commands" aria-label="Permalink to &quot;Sending Commands&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>setMotionOwner()</code></td><td>Take control of a joint</td></tr><tr><td><code>setPosRef()</code></td><td>Set joint position target</td></tr><tr><td><code>setTorqueRef()</code></td><td>Set torque target (Nm)</td></tr><tr><td><code>setGainKp()</code> / <code>setGainKd()</code></td><td>Set control gains with quantization</td></tr></tbody></table><blockquote><p>✅ Each joint must have an owner process to receive control commands.</p></blockquote><hr><h2 id="imu-sensor-api-rbq-api-imu" tabindex="-1">IMU Sensor API (<code>RBQ_API::IMU</code>) <a class="header-anchor" href="#imu-sensor-api-rbq-api-imu" aria-label="Permalink to &quot;IMU Sensor API (`RBQ_API::IMU`)&quot;">​</a></h2><p>Provides access to robot orientation and motion state.</p><table tabindex="0"><thead><tr><th>Function</th><th>Output</th></tr></thead><tbody><tr><td><code>getQuaternion()</code></td><td>Orientation as Eigen quaternion (w, x, y, z)</td></tr><tr><td><code>getRPY()</code></td><td>Roll, Pitch, Yaw (ZYX Euler angles, radians)</td></tr><tr><td><code>getGyro()</code></td><td>Angular velocity in rad/s (X, Y, Z)</td></tr><tr><td><code>getAcc()</code></td><td>Linear acceleration in m/s² (X, Y, Z)</td></tr></tbody></table><hr><h2 id="gamepad-api-rbq-api-gamepad" tabindex="-1">Gamepad API (<code>RBQ_API::Gamepad</code>) <a class="header-anchor" href="#gamepad-api-rbq-api-gamepad" aria-label="Permalink to &quot;Gamepad API (`RBQ_API::Gamepad`)&quot;">​</a></h2><p>Supports <strong>Logitech F710 (X mode)</strong> for teleoperation.</p><table tabindex="0"><thead><tr><th>Type</th><th>Function</th><th>Description</th></tr></thead><tbody><tr><td>Joystick</td><td><code>getLeftJogX/Y()</code>, <code>getRightJogX/Y()</code></td><td>Range: [-1.0, 1.0]</td></tr><tr><td>Trigger</td><td><code>getLeftTrigger()</code>, <code>getRightTrigger()</code></td><td>Range: [0.0, 1.0]</td></tr><tr><td>Button</td><td><code>getButtonState(Button::X)</code></td><td>Returns <code>true</code> if pressed</td></tr></tbody></table><hr><h2 id="built-in-motion-programs" tabindex="-1">Built-in Motion Programs <a class="header-anchor" href="#built-in-motion-programs" aria-label="Permalink to &quot;Built-in Motion Programs&quot;">​</a></h2><p>Easily trigger predefined robot behaviors:</p><table tabindex="0"><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>motionStaticReady()</code></td><td>Move to ready pose</td></tr><tr><td><code>motionStaticGround()</code></td><td>Lie down to ground pose</td></tr><tr><td><code>motionDynamicWalk()</code></td><td>Start dynamic walking</td></tr><tr><td><code>motionDynamicRun()</code></td><td>Start dynamic running</td></tr><tr><td><code>motionDynamicAim()</code></td><td>Aim pose for manipulation/vision</td></tr><tr><td><code>motionDynamicStairs()</code></td><td>Stair climbing motion</td></tr><tr><td><code>motionDynamicHealthCheck()</code></td><td>Diagnostic motion</td></tr></tbody></table><hr>',30)]))}const g=e(r,[["render",i]]);export{m as __pageData,g as default};
