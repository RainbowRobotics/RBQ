/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: Joy.idl
  Source: Joy.hpp
  Cyclone DDS: v0.10.5

*****************************************************************/
#ifndef DDSCXX_JOY_HPP
#define DDSCXX_JOY_HPP

#include <vector>

namespace sensor_msgs
{
class Joy
{
private:
 std::vector<float> axes_;
 std::vector<bool> buttons_;

public:
  Joy() = default;

  explicit Joy(
    const std::vector<float>& axes,
    const std::vector<bool>& buttons) :
    axes_(axes),
    buttons_(buttons) { }

  const std::vector<float>& axes() const { return this->axes_; }
  std::vector<float>& axes() { return this->axes_; }
  void axes(const std::vector<float>& _val_) { this->axes_ = _val_; }
  void axes(std::vector<float>&& _val_) { this->axes_ = _val_; }
  const std::vector<bool>& buttons() const { return this->buttons_; }
  std::vector<bool>& buttons() { return this->buttons_; }
  void buttons(const std::vector<bool>& _val_) { this->buttons_ = _val_; }
  void buttons(std::vector<bool>&& _val_) { this->buttons_ = _val_; }

  bool operator==(const Joy& _other) const
  {
    (void) _other;
    return axes_ == _other.axes_ &&
      buttons_ == _other.buttons_;
  }

  bool operator!=(const Joy& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::sensor_msgs::Joy>::getTypeName()
{
  return "sensor_msgs::Joy";
}

template <> constexpr bool TopicTraits<::sensor_msgs::Joy>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::sensor_msgs::Joy>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::sensor_msgs::Joy>::type_map_blob_sz() { return 258; }
template<> constexpr unsigned int TopicTraits<::sensor_msgs::Joy>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::sensor_msgs::Joy>::type_map_blob() {
  static const uint8_t blob[] = {
 0x54,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x2c,  0x7c,  0x0e,  0xac,  0x90,  0xe4,  0x19, 
 0x57,  0x1d,  0xa2,  0x71,  0xb4,  0x28,  0x9c,  0x00,  0x3c,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2c,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09, 
 0x42,  0xb4,  0x7e,  0xed,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x01,  0x02,  0x63,  0x4e,  0xff,  0x7e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x61,  0xec,  0xae,  0x8b,  0x15,  0x88,  0xaa,  0x38,  0xd3,  0x4a,  0xc0,  0xe8,  0xc8,  0x7a,  0x00, 
 0x66,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x73,  0x65,  0x6e,  0x73,  0x6f,  0x72,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a, 
 0x3a,  0x4a,  0x6f,  0x79,  0x00,  0x00,  0x00,  0x00,  0x3e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09, 
 0x05,  0x00,  0x00,  0x00,  0x61,  0x78,  0x65,  0x73,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x01,  0x08,  0x00,  0x00,  0x00, 
 0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x61,  0xec,  0xae,  0x8b,  0x15,  0x88,  0xaa,  0x38,  0xd3,  0x4a,  0xc0, 
 0xe8,  0xc8,  0x7a,  0xf1,  0x2c,  0x7c,  0x0e,  0xac,  0x90,  0xe4,  0x19,  0x57,  0x1d,  0xa2,  0x71,  0xb4, 
 0x28,  0x9c, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::sensor_msgs::Joy>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x2c,  0x7c,  0x0e,  0xac,  0x90,  0xe4,  0x19,  0x57,  0x1d,  0xa2,  0x71, 
 0xb4,  0x28,  0x9c,  0x00,  0x40,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x61,  0xec,  0xae,  0x8b,  0x15,  0x88,  0xaa,  0x38,  0xd3,  0x4a,  0xc0, 
 0xe8,  0xc8,  0x7a,  0x00,  0x6a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::sensor_msgs::Joy>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::sensor_msgs::Joy>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::sensor_msgs::Joy)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::sensor_msgs::Joy>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::sensor_msgs::Joy& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.axes().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.axes()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.buttons().size());
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      {
        if (!write(streamer, bool(instance.buttons()[i_1])))
          return false;
      }
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::sensor_msgs::Joy& instance, bool as_key) {
  auto &props = get_type_props<::sensor_msgs::Joy>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::sensor_msgs::Joy& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.axes().size());
      if (!read(streamer, se_1))
        return false;
      instance.axes().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.axes()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.buttons().size());
      if (!read(streamer, se_1))
        return false;
      instance.buttons().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      {
        bool b(false);
        if (!read(streamer, b))
          return false;
        instance.buttons()[i_1] = b;
      }
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::sensor_msgs::Joy& instance, bool as_key) {
  auto &props = get_type_props<::sensor_msgs::Joy>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::sensor_msgs::Joy& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.axes().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.buttons().size());
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      {
        if (!move(streamer, bool(instance.buttons()[i_1])))
          return false;
      }
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::sensor_msgs::Joy& instance, bool as_key) {
  auto &props = get_type_props<::sensor_msgs::Joy>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::sensor_msgs::Joy& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      {
        if (!max(streamer, bool(instance.buttons()[i_1])))
          return false;
      }
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::sensor_msgs::Joy& instance, bool as_key) {
  auto &props = get_type_props<::sensor_msgs::Joy>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_JOY_HPP
